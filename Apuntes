*Esquema Basico:
	El PPD se divide en 4 threads los cuales se encargan de : 
		- Main: Recibir los pedidos y meterlos en una cola (QUEUE) 
		- SSTF: Sacar los pedidos de la cola (QUEUE) y ponerlos segurn el algoritmo en la cola principal (first)
		- TAKER: Sacar los pedidos de la lista (first), atenderlos y enviar la respuesta por sockets
		- ConsoleHandler: Esta conectada a la consola y se ocupa de atender sus pedidos
	La consola del PPD esta en un proyecto aparte ya que esta debe ser ejecutada en un proceso nuevo mediante el uso de fork 
		
*Problema con el SSTF: si tenemos la lista vacia y la cola llena, cuando un thread quiera poner nodos en la lista sacandolos de la cola se va a encontrar 
que siempre estara vacia ya que el otro thread, al mismo tiempo que uno pone nodos, los va sacando.
-Posible Solucion: hacer un if al sstf, si la lista esta vacia que busque en la cola cual es el nodo que mas le conviene quitar de la cola segun el headPosition.
el problema de esta solucion es que podriamos llegar a estar en la misma... si la cola esta vacia y la lista tambien el algoritmo entero seria un FIFO

*Problema con los Threads: me tira errores muy extra√±os (sys calls) si llamo a un thread mediante la funcion thread_create que se encuentre en otro .c, 
-Posible Solucion: decidi implementarlos en el mismo .c que el que los llama.

*Problema TAKER_getRequest: por algun motivo cuando quiero el msg (nipcMsg_t) por parametro, me lo devuelve con el payload en "out of bounds"
-Posible Solucion: lo pase por "return"

*Problema memcpy: No se como castear un char[2] a un int.
-Posible Solucion: utilize el memcpy pasando una variable estatica int y copiando el contenido del char[2] a esta variable.

*Comando para crear smallfat: mkfs.msdos -F 32 -S 512 -s 8 -C escritura.disk 524288
*Comando para crear bigfat: mkfs.msdos -F 32 -S 512 -s 8 -C escritura.disk 2097152

1) Comando para hacer checkout: svn checkout https//fuselage-fat32-utn.googlecode.com/svn/trunk
2) chmod +x make_commons
3) ./make_commons
4) Comando para compilar gcc -L/home/utn_so/Commons -lCommons -licui18n -lpthread -I/home/utn_so/Commons/include -I/home/utn_so/[proceso]/include [lista de .c] -o [nombre del proceso]
5) Para correrlo con el shared library LD_LIBRARY_PATH=/home/utn_so/Commons:$LD_LIBRARY_PATH ./[nombre del proceso]

